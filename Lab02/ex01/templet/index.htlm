<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trang Web Mã Hóa</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f0f0f0; }
        h1 { text-align: center; color: #333; }
        .container { max-width: 600px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
        label, select, input, button { display: block; margin: 10px 0; width: 100%; padding: 8px; }
        button { background-color: #4CAF50; color: white; border: none; cursor: pointer; }
        button:hover { background-color: #45a049; }
        #result { margin-top: 20px; padding: 10px; border: 1px solid #ddd; border-radius: 4px; }
    </style>
</head>
<body>
    <h1>Trang Web Mã Hóa</h1>
    <div class="container">
        <label for="algorithm">Chọn thuật toán:</label>
        <select id="algorithm">
            <option value="caesar">Caesar Cipher</option>
            <option value="playfair">Playfair Cipher</option>
            <option value="railfence">Railfence Cipher</option>
            <option value="vigenere">Vigenere Cipher</option>
        </select>

        <label for="text">Văn bản:</label>
        <input type="text" id="text" placeholder="Nhập văn bản">

        <label for="key">Khóa:</label>
        <input type="text" id="key" placeholder="Nhập khóa">

        <button onclick="process('encrypt')">Mã hóa</button>
        <button onclick="process('decrypt')">Giải mã</button>

        <div id="result">Kết quả: </div>
    </div>

    <script>
        // Thuật toán Caesar Cipher
        function caesarCipher(text, key, mode) {
            key = parseInt(key) || 0;
            let result = "";
            text = text.toUpperCase();
            for (let char of text) {
                if (char.match(/[A-Z]/)) {
                    let code = char.charCodeAt(0) - 65;
                    let shift = mode === "encrypt" ? (code + key) % 26 : (code - key + 26) % 26;
                    result += String.fromCharCode(shift + 65);
                } else {
                    result += char;
                }
            }
            return result;
        }

        // Thuật toán Playfair Cipher (đơn giản hóa)
        function playfairCipher(text, key, mode) {
            // Ma trận Playfair
            key = key.toUpperCase().replace("J", "I");
            let matrix = createPlayfairMatrix(key);
            text = text.toUpperCase().replace("J", "I").replace(/[^A-Z]/g, "");
            if (text.length % 2 === 1) text += "X";
            let result = "";

            for (let i = 0; i < text.length; i += 2) {
                let [row1, col1] = findLetterCoords(matrix, text[i]);
                let [row2, col2] = findLetterCoords(matrix, text[i + 1]);
                if (row1 === row2) {
                    let shift = mode === "encrypt" ? 1 : -1;
                    result += matrix[row1][(col1 + shift + 5) % 5] + matrix[row2][(col2 + shift + 5) % 5];
                } else if (col1 === col2) {
                    let shift = mode === "encrypt" ? 1 : -1;
                    result += matrix[(row1 + shift + 5) % 5][col1] + matrix[(row2 + shift + 5) % 5][col2];
                } else {
                    result += matrix[row1][col2] + matrix[row2][col1];
                }
            }
            return result;
        }

        function createPlayfairMatrix(key) {
            let alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ";
            let matrix = [...new Set(key + alphabet)].slice(0, 25);
            return Array(5).fill().map((_, i) => matrix.slice(i * 5, (i + 1) * 5));
        }

        function findLetterCoords(matrix, letter) {
            for (let row = 0; row < 5; row++)
                for (let col = 0; col < 5; col++)
                    if (matrix[row][col] === letter) return [row, col];
            return [0, 0];
        }

        // Thuật toán Railfence Cipher
        function railfenceCipher(text, key, mode) {
            key = parseInt(key) || 2;
            text = text.toUpperCase().replace(/[^A-Z]/g, "");
            if (mode === "encrypt") {
                let rails = Array(key).fill("");
                let dirDown = false, row = 0;
                for (let char of text) {
                    rails[row] += char;
                    if (row === 0 || row === key - 1) dirDown = !dirDown;
                    row += dirDown ? 1 : -1;
                }
                return rails.join("");
            } else {
                let result = Array(text.length).fill("_");
                let railLength = Array(key).fill(0);
                let dirDown = false, row = 0, idx = 0;
                for (let i = 0; i < text.length; i++) {
                    railLength[row]++;
                    if (row === 0 || row === key - 1) dirDown = !dirDown;
                    row += dirDown ? 1 : -1;
                }
                let pos = 0;
                for (let r = 0; r < key; r++) {
                    for (let i = 0; i < railLength[r]; i++) {
                        result[pos] = text[idx++];
                        pos += key;
                        if (pos >= text.length) pos = r + 1;
                    }
                }
                return result.join("");
            }
        }

        // Thuật toán Vigenere Cipher
        function vigenereCipher(text, key, mode) {
            text = text.toUpperCase();
            key = key.toUpperCase().replace(/[^A-Z]/g, "");
            let result = "", keyIdx = 0;
            for (let char of text) {
                if (char.match(/[A-Z]/)) {
                    let keyChar = key[keyIdx % key.length].charCodeAt(0) - 65;
                    let code = char.charCodeAt(0) - 65;
                    let shift = mode === "encrypt" ? (code + keyChar) % 26 : (code - keyChar + 26) % 26;
                    result += String.fromCharCode(shift + 65);
                    keyIdx++;
                } else {
                    result += char;
                }
            }
            return result;
        }

        // Xử lý mã hóa/giải mã
        function process(mode) {
            const algorithm = document.getElementById("algorithm").value;
            const text = document.getElementById("text").value;
            const key = document.getElementById("key").value;
            let result;

            if (!text || !key) {
                alert("Vui lòng nhập văn bản và khóa!");
                return;
            }

            switch (algorithm) {
                case "caesar":
                    result = caesarCipher(text, key, mode);
                    break;
                case "playfair":
                    result = playfairCipher(text, key, mode);
                    break;
                case "railfence":
                    result = railfenceCipher(text, key, mode);
                    break;
                case "vigenere":
                    result = vigenereCipher(text, key, mode);
                    break;
                default:
                    result = "Thuật toán không được hỗ trợ!";
            }

            document.getElementById("result").innerText = `Kết quả: ${result}`;
        }
    </script>
</body>
</html>